''' "================================ Functions ================================== '''
''' Введение в функции. Позиционные и именованные args kwargs аргументы по default.Аннотации.'''
''' Аннотация - помогает сделать код информативным и избавиться от некоторых проблем с динамической типизацией '''
# a = 7
# b = 'hello'
# # b = 3 

# num : int = 9
# print (num)
# num = 'hello'
# print (num)

'''                              ============== Функции =============                            '''
''' Функция - именованный блок кода, который выполняет одну задачу и может в себя принимать аргументы и возвращать какой-либо результат. Так же можно использовать многократно, вызывая по имени       '''

# print(
#     'hello',
#     'hello2'
# )
# input("hello")

# def <название функции> (параметры):
# Tab <Тело функции>

# a = 9
# b = 8
# print (a+b)

# def funcadd(a, b,c,d):
#     return a+b/c*d
# a = funcadd(9,8,2,5)
# print (a)

# def my_len(obj):
#     count = 0
#     for element in obj:
#         count += 1
#     print (count)

# my_len('hello world')

''' функции нужны, чтобы код не повторялся и был универсальным(принцип DRY) '''
''' DRY -> (don't repeat yourself) '''

''' RETURN(return)'''
# Используется для возващения результата и на этом моменте ваша функция завершает работу

# def makers():
#     return 'Makers'
#     print ('6') # После return код не читается!!!

''' Параметры и аргументы '''
# Параметры - локальные переменные внутри функции, значение переменным мы задаем при вызове функции
# Аргументы - значения которые мы передаем параметрам функции при вызове функции 
''' print ('аргумент') '''

''' Виды параметров '''
# 1. Обязательные (obj, a, b, name, last_name) -> Обязательные параметры определяют какие аргументы обязательно передавать функции.Аргументов должно быть столько, сколько и параметров 
# 2. Необязательные(параметры со значением по умолчанию (Например (a=8)) ) -> 
# 2.1 с дефолтом
# 2.2 args,kwargs -> args - В args попадают все неименованные аргументы. Все позиционные аргументы, которые не попали в обязательные или c Default'ами.args -> tuple,в котором к нам приходят все аргументы которые были переданы через запятую(кроме обязательных и с дефолтом)                     kwargs -> принимает в себя именованные аргументы(все лишние именованные аргументы).dict, в котором нам приходят все аргументы, которые переданы ввиде ключа=значения (кроме именованных)
''' Виды аргументов '''
# 1. позиционные (по позиции)
"John", 'Snow' # В каком порядке передали аргументы, в таком и будут присвоены локальным переменным.
# def a(c,b):
#     pass
# a ('john','snow')
# 2. Именованные аргументы(по названию (параметр=2))
# def a(c,b):
#     pass
# a (b='snow',c='bob')

# def add(b:int, a: int=2):
#     res = a + b
#     print (res)
# add(9, 8)

# add(9)
# add(9,6)# позиционные аргументы
# add (a=8, b=12) # Именованные аргументы(порядок не имеет значение)

''' *Распаковка '''
# dict_ = {'a':1,'b':2}
# dict1 = {**dict_}
# print (dict1)

# def add(c,b,*a,**k):
#     print (c + b + sum(a) + sum(k.values()))
# add(1,2)
# add (2,3,43,343,111,k=12)

# def func (a,b=5,*args,**k):
#     print ('a - ', a)
#     print ('b - ', b)
#     print ('args - ',args)
#     print ('kwargs', k)
# func() ERROR
# func (4) 
# func(12,123,123,123,123)
# func ()
# def func (*args):
#     print ('args',
#     args)
# func (12,12,12,12,21,21)

# def getfack(num:int) -> int:
#     count = 1
#     for i in range(2,num+1):
#             count = count * i
#     print(count)

# getfack(6)